{"ast":null,"code":"var _jsxFileName = \"/Users/himanshipatel/Documents/react-trans/src/SpeechToText/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./style.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || window.speechSynthesis;\nlet mic = new SpeechRecognition();\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = \"en-US\";\nmic.crossBrowser = true;\nlet isListening = true;\nconst SpeechToText = () => {\n  _s();\n  const [transcript, setTranscript] = useState(\"\");\n  const [setPauseArry] = useState();\n  const startRecording = () => {\n    // mic.onresult = (event) => {\n    //   const speechToText = event.results[0][0].transcript;\n    //   setTranscript(speechToText);\n    // };\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join(\"\");\n      setTranscript(transcript);\n      console.log(transcript);\n    };\n    mic.start();\n  };\n  const stopRecording = () => {\n    mic.stop();\n  };\n  React.useEffect(() => {\n    handleListen();\n  }, [isListening]);\n  const handleListen = () => {\n    if (isListening) {\n      mic.start();\n      mic.onend = () => {\n        mic.start();\n      };\n    } else {\n      mic.stop();\n      mic.onend = () => {\n        // setMicOnOffStatus(false);\n      };\n    }\n    mic.onstart = () => {};\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join(\"\");\n      let textAnswer = transcript;\n      console.log(transcript, \"transcript\");\n      let audioToText = [];\n      audioToText.push(transcript);\n      if (browserName === \"Edge\") {\n        if (pauseTime >= 2 && countWords(transcript) !== 1 && (findWordBeforeLastDot(transcript).includes(\".\") || findWordBeforeLastDot(transcript).includes(\"?\"))) {\n          const regex = new RegExp(findWordBeforeLastDot(transcript), \"g\");\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n            lastWord: findWordBeforeLastDot(transcript),\n            searchDuplicate: (transcript.match(regex) || []).length\n          });\n          setPauseArry(pauseArry);\n        }\n      } else {\n        if (pauseTime >= 2 && countWords(transcript) !== 1) {\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript\n          });\n          setPauseArry(pauseArry);\n        }\n      }\n      pauseTime = 0;\n      mic.onerror = event => {\n        let audioToTextString = audioToText && audioToText.join(\" \");\n      };\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: startRecording,\n      children: \"Start Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: stopRecording,\n      children: \"Stop Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"U6Fuhb6ZGy7kU5WSm6lozrlXsms=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SpeechRecognition","window","webkitSpeechRecognition","speechSynthesis","mic","continuous","interimResults","lang","crossBrowser","isListening","SpeechToText","_s","transcript","setTranscript","setPauseArry","startRecording","onresult","event","Array","from","results","map","result","join","console","log","start","stopRecording","stop","useEffect","handleListen","onend","onstart","textAnswer","audioToText","push","browserName","pauseTime","countWords","findWordBeforeLastDot","includes","regex","RegExp","pauseArry","time","space","lastWord","searchDuplicate","match","length","onerror","audioToTextString","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/himanshipatel/Documents/react-trans/src/SpeechToText/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.scss\";\n\nlet SpeechRecognition =\n  window.SpeechRecognition ||\n  window.webkitSpeechRecognition ||\n  window.speechSynthesis;\n\nlet mic = new SpeechRecognition();\n\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = \"en-US\";\nmic.crossBrowser = true;\nlet isListening = true;\nconst SpeechToText = () => {\n  const [transcript, setTranscript] = useState(\"\");\n  const [setPauseArry] = useState()\n\n  const startRecording = () => {\n    // mic.onresult = (event) => {\n    //   const speechToText = event.results[0][0].transcript;\n    //   setTranscript(speechToText);\n    // };\n    mic.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n      setTranscript(transcript);\n      console.log(transcript);\n    };\n    mic.start();\n  };\n  const stopRecording = () => {\n    mic.stop();\n  };\n  React.useEffect(() => {\n    handleListen();\n  }, [isListening]);\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start();\n      mic.onend = () => {\n        mic.start();\n      };\n    } else {\n      mic.stop();\n      mic.onend = () => {\n        // setMicOnOffStatus(false);\n      };\n    }\n    mic.onstart = () => {};\n    mic.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n\n      let textAnswer = transcript;\n      console.log(transcript, \"transcript\");\n      let audioToText = [];\n      audioToText.push(transcript);\n      if (browserName === \"Edge\") {\n        if (\n          pauseTime >= 2 &&\n          countWords(transcript) !== 1 &&\n          (findWordBeforeLastDot(transcript).includes(\".\") ||\n            findWordBeforeLastDot(transcript).includes(\"?\"))\n        ) {\n          const regex = new RegExp(findWordBeforeLastDot(transcript), \"g\");\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n            lastWord: findWordBeforeLastDot(transcript),\n            searchDuplicate: (transcript.match(regex) || []).length,\n          });\n          setPauseArry(pauseArry);\n        }\n      } else {\n        if (pauseTime >= 2 && countWords(transcript) !== 1) {\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n          });\n          setPauseArry(pauseArry);\n        }\n      }\n\n      pauseTime = 0;\n\n      mic.onerror = (event) => {\n        let audioToTextString = audioToText && audioToText.join(\" \");\n      };\n    };\n  };\n\n  return (\n    <div className=\"button-container\">\n      <button className=\"button\" onClick={startRecording}>\n        Start Listening\n      </button>\n      <button className=\"button\" onClick={stopRecording}>\n        Stop Listening\n      </button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,IAAIC,iBAAiB,GACnBC,MAAM,CAACD,iBAAiB,IACxBC,MAAM,CAACC,uBAAuB,IAC9BD,MAAM,CAACE,eAAe;AAExB,IAAIC,GAAG,GAAG,IAAIJ,iBAAiB,CAAC,CAAC;AAEjCI,GAAG,CAACC,UAAU,GAAG,IAAI;AACrBD,GAAG,CAACE,cAAc,GAAG,IAAI;AACzBF,GAAG,CAACG,IAAI,GAAG,OAAO;AAClBH,GAAG,CAACI,YAAY,GAAG,IAAI;AACvB,IAAIC,WAAW,GAAG,IAAI;AACtB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC;EAEjC,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA;IACA;IACA;IACAX,GAAG,CAACY,QAAQ,GAAIC,KAAK,IAAK;MACxB,MAAML,UAAU,GAAGM,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1BD,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACV,UAAU,CAAC,CAClCW,IAAI,CAAC,EAAE,CAAC;MACXV,aAAa,CAACD,UAAU,CAAC;MACzBY,OAAO,CAACC,GAAG,CAACb,UAAU,CAAC;IACzB,CAAC;IACDR,GAAG,CAACsB,KAAK,CAAC,CAAC;EACb,CAAC;EACD,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BvB,GAAG,CAACwB,IAAI,CAAC,CAAC;EACZ,CAAC;EACDhC,KAAK,CAACiC,SAAS,CAAC,MAAM;IACpBC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACrB,WAAW,CAAC,CAAC;EAEjB,MAAMqB,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIrB,WAAW,EAAE;MACfL,GAAG,CAACsB,KAAK,CAAC,CAAC;MACXtB,GAAG,CAAC2B,KAAK,GAAG,MAAM;QAChB3B,GAAG,CAACsB,KAAK,CAAC,CAAC;MACb,CAAC;IACH,CAAC,MAAM;MACLtB,GAAG,CAACwB,IAAI,CAAC,CAAC;MACVxB,GAAG,CAAC2B,KAAK,GAAG,MAAM;QAChB;MAAA,CACD;IACH;IACA3B,GAAG,CAAC4B,OAAO,GAAG,MAAM,CAAC,CAAC;IACtB5B,GAAG,CAACY,QAAQ,GAAIC,KAAK,IAAK;MACxB,MAAML,UAAU,GAAGM,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1BD,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACV,UAAU,CAAC,CAClCW,IAAI,CAAC,EAAE,CAAC;MAEX,IAAIU,UAAU,GAAGrB,UAAU;MAC3BY,OAAO,CAACC,GAAG,CAACb,UAAU,EAAE,YAAY,CAAC;MACrC,IAAIsB,WAAW,GAAG,EAAE;MACpBA,WAAW,CAACC,IAAI,CAACvB,UAAU,CAAC;MAC5B,IAAIwB,WAAW,KAAK,MAAM,EAAE;QAC1B,IACEC,SAAS,IAAI,CAAC,IACdC,UAAU,CAAC1B,UAAU,CAAC,KAAK,CAAC,KAC3B2B,qBAAqB,CAAC3B,UAAU,CAAC,CAAC4B,QAAQ,CAAC,GAAG,CAAC,IAC9CD,qBAAqB,CAAC3B,UAAU,CAAC,CAAC4B,QAAQ,CAAC,GAAG,CAAC,CAAC,EAClD;UACA,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACH,qBAAqB,CAAC3B,UAAU,CAAC,EAAE,GAAG,CAAC;UAChE+B,SAAS,CAACR,IAAI,CAAC;YACbS,IAAI,EAAEP,SAAS;YACfQ,KAAK,EAAEP,UAAU,CAAC1B,UAAU,CAAC,GAAG,CAAC;YACjCA,UAAU;YACVkC,QAAQ,EAAEP,qBAAqB,CAAC3B,UAAU,CAAC;YAC3CmC,eAAe,EAAE,CAACnC,UAAU,CAACoC,KAAK,CAACP,KAAK,CAAC,IAAI,EAAE,EAAEQ;UACnD,CAAC,CAAC;UACFnC,YAAY,CAAC6B,SAAS,CAAC;QACzB;MACF,CAAC,MAAM;QACL,IAAIN,SAAS,IAAI,CAAC,IAAIC,UAAU,CAAC1B,UAAU,CAAC,KAAK,CAAC,EAAE;UAClD+B,SAAS,CAACR,IAAI,CAAC;YACbS,IAAI,EAAEP,SAAS;YACfQ,KAAK,EAAEP,UAAU,CAAC1B,UAAU,CAAC,GAAG,CAAC;YACjCA;UACF,CAAC,CAAC;UACFE,YAAY,CAAC6B,SAAS,CAAC;QACzB;MACF;MAEAN,SAAS,GAAG,CAAC;MAEbjC,GAAG,CAAC8C,OAAO,GAAIjC,KAAK,IAAK;QACvB,IAAIkC,iBAAiB,GAAGjB,WAAW,IAAIA,WAAW,CAACX,IAAI,CAAC,GAAG,CAAC;MAC9D,CAAC;IACH,CAAC;EACH,CAAC;EAED,oBACExB,OAAA;IAAKqD,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BtD,OAAA;MAAQqD,SAAS,EAAC,QAAQ;MAACE,OAAO,EAAEvC,cAAe;MAAAsC,QAAA,EAAC;IAEpD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT3D,OAAA;MAAQqD,SAAS,EAAC,QAAQ;MAACE,OAAO,EAAE3B,aAAc;MAAA0B,QAAA,EAAC;IAEnD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT3D,OAAA;MAAAsD,QAAA,EAAIzC;IAAU;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV,CAAC;AAAC/C,EAAA,CAhGID,YAAY;AAAAiD,EAAA,GAAZjD,YAAY;AAkGlB,eAAeA,YAAY;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}