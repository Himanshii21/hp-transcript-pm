{"ast":null,"code":"var _jsxFileName = \"/Users/himanshipatel/Documents/react-trans/src/SpeechToText/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./style.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || window.speechSynthesis;\nlet mic = new SpeechRecognition();\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = \"en-US\";\nmic.crossBrowser = true;\nlet isListening = true;\nconst SpeechToText = () => {\n  _s();\n  const [transcript, setTranscript] = useState(\"\");\n  const [pauseArry, setPauseArry] = useState('');\n  const startRecording = () => {\n    // mic.onresult = (event) => {\n    //   const speechToText = event.results[0][0].transcript;\n    //   setTranscript(speechToText);\n    // };\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join(\"\");\n      setTranscript(transcript);\n      console.log(transcript);\n    };\n    mic.start();\n  };\n  const stopRecording = () => {\n    mic.stop();\n  };\n  React.useEffect(() => {\n    handleListen();\n  }, [isListening]);\n  const handleListen = () => {\n    if (isListening) {\n      mic.start();\n      mic.onend = () => {\n        mic.start();\n      };\n    } else {\n      mic.stop();\n      mic.onend = () => {\n        // setMicOnOffStatus(false);\n      };\n    }\n    mic.onstart = () => {};\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join(\"\");\n      let textAnswer = transcript;\n      console.log(transcript, \"transcript\");\n      let audioToText = [];\n      audioToText.push(transcript);\n      if (browserName === \"Edge\") {\n        if (pauseTime >= 2 && countWords(transcript) !== 1 && (findWordBeforeLastDot(transcript).includes(\".\") || findWordBeforeLastDot(transcript).includes(\"?\"))) {\n          const regex = new RegExp(findWordBeforeLastDot(transcript), \"g\");\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n            lastWord: findWordBeforeLastDot(transcript),\n            searchDuplicate: (transcript.match(regex) || []).length\n          });\n          setPauseArry(pauseArry);\n        }\n      } else {\n        if (pauseTime >= 2 && countWords(transcript) !== 1) {\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript\n          });\n          setPauseArry(pauseArry);\n        }\n      }\n      pauseTime = 0;\n      mic.onerror = event => {\n        let audioToTextString = audioToText && audioToText.join(\" \");\n      };\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: startRecording,\n      children: \"Start Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: stopRecording,\n      children: \"Stop Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"uNePt+y2BGxFcMtZcAfJ6q1vLHM=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SpeechRecognition","window","webkitSpeechRecognition","speechSynthesis","mic","continuous","interimResults","lang","crossBrowser","isListening","SpeechToText","_s","transcript","setTranscript","pauseArry","setPauseArry","startRecording","onresult","event","Array","from","results","map","result","join","console","log","start","stopRecording","stop","useEffect","handleListen","onend","onstart","textAnswer","audioToText","push","browserName","pauseTime","countWords","findWordBeforeLastDot","includes","regex","RegExp","time","space","lastWord","searchDuplicate","match","length","onerror","audioToTextString","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/himanshipatel/Documents/react-trans/src/SpeechToText/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.scss\";\n\nlet SpeechRecognition =\n  window.SpeechRecognition ||\n  window.webkitSpeechRecognition ||\n  window.speechSynthesis;\n\nlet mic = new SpeechRecognition();\n\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = \"en-US\";\nmic.crossBrowser = true;\nlet isListening = true;\nconst SpeechToText = () => {\n  const [transcript, setTranscript] = useState(\"\");\n  const [pauseArry,setPauseArry] = useState('')\n  \n\n  const startRecording = () => {\n    // mic.onresult = (event) => {\n    //   const speechToText = event.results[0][0].transcript;\n    //   setTranscript(speechToText);\n    // };\n    mic.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n      setTranscript(transcript);\n      console.log(transcript);\n    };\n    mic.start();\n  };\n  const stopRecording = () => {\n    mic.stop();\n  };\n  React.useEffect(() => {\n    handleListen();\n  }, [isListening]);\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start();\n      mic.onend = () => {\n        mic.start();\n      };\n    } else {\n      mic.stop();\n      mic.onend = () => {\n        // setMicOnOffStatus(false);\n      };\n    }\n    mic.onstart = () => {};\n    mic.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n\n      let textAnswer = transcript;\n      console.log(transcript, \"transcript\");\n      let audioToText = [];\n      audioToText.push(transcript);\n      if (browserName === \"Edge\") {\n        if (\n          pauseTime >= 2 &&\n          countWords(transcript) !== 1 &&\n          (findWordBeforeLastDot(transcript).includes(\".\") ||\n            findWordBeforeLastDot(transcript).includes(\"?\"))\n        ) {\n          const regex = new RegExp(findWordBeforeLastDot(transcript), \"g\");\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n            lastWord: findWordBeforeLastDot(transcript),\n            searchDuplicate: (transcript.match(regex) || []).length,\n          });\n          setPauseArry(pauseArry);\n        }\n      } else {\n        if (pauseTime >= 2 && countWords(transcript) !== 1) {\n          pauseArry.push({\n            time: pauseTime,\n            space: countWords(transcript) - 1,\n            transcript,\n          });\n          setPauseArry(pauseArry);\n        }\n      }\n\n      pauseTime = 0;\n\n      mic.onerror = (event) => {\n        let audioToTextString = audioToText && audioToText.join(\" \");\n      };\n    };\n  };\n\n  return (\n    <div className=\"button-container\">\n      <button className=\"button\" onClick={startRecording}>\n        Start Listening\n      </button>\n      <button className=\"button\" onClick={stopRecording}>\n        Stop Listening\n      </button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}